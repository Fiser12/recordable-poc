---
description: 
globs: 
alwaysApply: true
---
# **03: Dependencias a Utilizar**

## **Introducción**

Este documento enumera y justifica las dependencias de software principales seleccionadas para el proyecto. La elección se basa en los requisitos funcionales y no funcionales (implícitos y explícitos) y en la arquitectura definida en la sección anterior, buscando un equilibrio entre funcionalidad, rendimiento, mantenibilidad y eficiencia en el desarrollo.

## **Dependencias Fundamentales**

1.  **React Native:**
    *   **Vínculo con Requisitos:** Permite el desarrollo de aplicaciones móviles nativas para iOS y Android desde una única base de código (JavaScript/TypeScript). Esto satisface el requisito implícito de multiplataforma, reduciendo el tiempo y coste de desarrollo.
    *   **Vínculo con Arquitectura:** Es la base sobre la que se construye toda la arquitectura de presentación (UI) y gran parte de la lógica de negocio (a través de Hooks y estado). Su rendimiento nativo es crucial, especialmente si se integran funcionalidades que demanden recursos, como podrían ser las relacionadas con Inteligencia Artificial (IA), donde el acceso más cercano al hardware que proporciona un framework nativo es beneficioso.
    *   **Argumento:** Ofrece un ecosistema maduro, una gran comunidad y la capacidad de crear interfaces de usuario fluidas y con aspecto nativo.

2.  **Expo:**
    *   **Vínculo con Requisitos:** Simplifica enormemente el ciclo de desarrollo, build y despliegue, especialmente en las fases iniciales. Permite el acceso a una gran cantidad de APIs nativas (cámara, geolocalización, sensores, etc.) sin necesidad de escribir código nativo específico (Java/Kotlin/Swift/Objective-C). Facilita las actualizaciones Over-The-Air (OTA).
    *   **Vínculo con Arquitectura:** Se alinea con la arquitectura propuesta al facilitar un desarrollo rápido y la gestión de dependencias. La capa de servicios puede aprovechar los módulos de Expo para interactuar con el hardware o servicios del sistema operativo. Su sistema de *build* en la nube simplifica la generación de binarios para las tiendas.
    *   **Argumento:** Reduce la complejidad inicial, acelera el desarrollo y permite enfocarse en las funcionalidades de la aplicación. Aunque puede tener limitaciones para casos de uso nativos muy específicos, su flexibilidad (con Expo Dev Client o la opción de *eject*) lo hace una opción robusta y escalable para la mayoría de proyectos.

3.  **React Navigation:**
    *   **Vínculo con Requisitos:** Toda aplicación móvil con más de una pantalla necesita un sistema de navegación.
    *   **Vínculo con Arquitectura:** Es el estándar de facto en el ecosistema React Native para gestionar las transiciones entre pantallas (`screens`), navegación tipo stack, tabs, drawer, etc. Se integra directamente en la capa de presentación y organiza el flujo de la interfaz de usuario.
    *   **Argumento:** Solución completa, flexible y mantenida por la comunidad, recomendada por Expo y React Native.

4.  **Gestor de Estado (Zustand / Context API / Redux Toolkit):**
    *   **Vínculo con Requisitos:** La complejidad de la aplicación determinará cómo se comparte y gestiona el estado entre componentes (datos de usuario, preferencias, estado de la UI, etc.).
    *   **Vínculo con Arquitectura:** La capa de lógica de negocio/dominio requiere una estrategia clara para el manejo del estado. La elección específica (Zustand por simplicidad y rendimiento, Context API para casos simples, Redux Toolkit para estado complejo y predecible) dependerá de la evolución de los requisitos, pero la necesidad de *alguna* solución es inherente a la arquitectura.
    *   **Argumento:** Esencial para mantener la aplicación organizada, predecible y fácil de depurar a medida que crece.

5.  **Cliente HTTP (Axios / Fetch API):**
    *   **Vínculo con Requisitos:** Si la aplicación necesita interactuar con un backend o servicios externos para obtener o enviar datos.
    *   **Vínculo con Arquitectura:** La capa de Datos/Servicios se encargará de encapsular estas comunicaciones. Se necesita una librería o API estándar para realizar peticiones HTTP.
    *   **Argumento:** `Fetch` está integrado, `axios` ofrece características adicionales como interceptores y mejor manejo de errores, siendo una opción popular.

## **Otras Dependencias Potenciales (Según Requisitos Específicos)**

*   **UI Component Library (e.g., React Native Paper, NativeBase):** Si los requisitos visuales se alinean con estas librerías, pueden acelerar el desarrollo de la UI.
*   **AsyncStorage:** Para persistencia de datos simple en el dispositivo (preferencias, tokens).
*   **React Hook Form:** Para gestionar formularios complejos con validaciones.
*   **Date-fns / Day.js:** Para manipulación avanzada de fechas y horas.
*   **Testing Libraries (Jest, React Native Testing Library):** Fundamentales para asegurar la calidad y cumplir requisitos no funcionales de fiabilidad.
*   **Librerías de IA/ML (e.g., TensorFlow.js, ONNX Runtime):** Si existen requisitos específicos de IA, estas librerías permitirían ejecutar modelos en el dispositivo, aprovechando el rendimiento nativo que ofrece React Native.

La selección final de dependencias se refinará a medida que los requisitos se detallen y el desarrollo avance, siempre manteniendo la coherencia con la arquitectura definida. 